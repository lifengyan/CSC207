package phasetwo;

import java.util.ArrayList;
/**
 * Picker class is instantiated when a picker is ready and is stored in PickerManager. 
 * This class contains name of the picker, the informations of the request that the picker 
 * is working on, the locations that the picker should go, the picker's forkLift status 
 * and check if the picker has picked a correct fascia or not. 
 * @author TongZhu
 *
 */
public class Picker {
  private ArrayList<String> forkLift = new ArrayList<String>(); // contains correctly picked fascis's SKUs
  private ArrayList<Location> locationList = new ArrayList<Location>(); // ordered 8 locations associate with the request
  private Integer requestId = 0; //unique ID for the request
  private String name; // name of the picker
  private Integer nextpick = 0;// keep track of how many fascias the picker has picked


  /**
   * Constructor, get input string as a picker's name and assign it to this.name
   * @param pickername the name of picker for this picker instance
   */
  public Picker(String pickername) {
    this.name = pickername;
  }
  
/**
 * add the SKU number of the correct fascia that is picked by picker to the forkLift. 
 * checkPickerScanedCorrectSKU method will be called before this method to make sure it is the
 * correct SKU that goes into the forkLift. 
 * The same time, the warehouse stock information will be updated here.
 * Since we incremented nextpick by one in the checkPickerScanedCorrectSKU method, we use nextpick-1 here.
 * @param sku
 * @param currentWarehouse
 */
  public void addtoFolkLift(String sku) {
    this.forkLift.add(sku);
  }
  
 /**
  * add the arrayList of location for the 8 fascias that the picker needs to pick. 
  * 
  * @param locations: an arrayList of location that is generated by the optimize method 
  * in generic software, the method can be found in WarehousePicking.java
  */
  public void addLocation(ArrayList<Location> locations) {
    this.locationList = locations;
  }

  /**
   * check if the picker get correct SKU for the current pick by comparing the input 
   * to the correct SKUs stored in locationList. If this pick is correct, increase nextPick by one 
   * to get the next location that will be send to the picker.
   * 
   * @param sku: a sting got form user input, simulate the action of picker scans the barCode after a pick
   * @return boolean: true if it is the correct SKU, false if it is not.
   */
  public boolean checkPickerScanedCorrectSKU(String sku){
	if(sku.equals(this.locationList.get(nextpick).getSKU())){
		nextpick++;
		return true;
	}else{return false;}
  }

  /**
   * check if the pickers' forkLift have all 8 fascias needed for the requests they are working on.
   * @return boolean true if forkLift has 8 SKUs, false if not.
   */
  public boolean checkgotAllSKU(){
	  if (this.forkLift.size() == 8){
		  return true;
	  }
	  else{return false;}
  }

  /**
   * getter method to get what is in this picker's forLift at the time that this function is called. 
   * @return forkLift: contains SKU strings of the fascias that this picker already picked.
   */
  public ArrayList<String> getForkLift() {
    return this.forkLift;
  }

  /**
   * getter method to get the unique requestID associated with the request that the picker
   * is currently working on. Used when picker finished this request and send it to marshaling 
   * in the main function.
   * @return
   */
  public Integer getRequestid() {
    return this.requestId;
  }

  /**
   * getter function to get the name variable in this picker instance, this method 
   * is used in pickerManager to find the picker instance with a specified name variable 
   * @return the picer's name
   */
  public String getName() {
    return this.name;
  }

  /**
   * getter method to get the next location that the picker should go to
   * @return a String contains location of next fascia that the picker needs to pick
   */
  public String getNextLocation() {
    return locationList.get(nextpick).toString();
  }
  /**
   * getter function for location list 
   * @return
   */
  public ArrayList<Location> getLocationList(){
	  return this.locationList;
  }
  /**
   * getter function for nextPick Integer
   * @return the number that indicates how many fascis this picker picked
   */
  public Integer getcurrentPickNum(){
	  return (this.nextpick)-1;
  }
/**
 * setter function to set the request id of the request that is assigned to this picker
 * @param id a unique request id 
 */
  public void setRequestid(int id) {
    this.requestId = id;
  }
}
